[project]
name = "search-api"
version = "2.0.4"
description = ""
authors = [
    {name = "Kial Jinnah",email = "kialj876@gmail.com"}
]
license = {text = "BSD 3-Clause"}
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
    "flask (>=3.1.0,<4.0.0)",
    "flask-cors (>=5.0.1,<6.0.0)",
    "flask-migrate (>=4.1.0,<5.0.0)",
    "flask-babel (>=4.0.0,<5.0.0)",
    "flask-sqlalchemy (>=3.1.1,<4.0.0)",
    "flask-jwt-oidc (>=0.8.0,<0.9.0)",
    "datedelta (>=1.4,<2.0)",
    "google-auth (>=2.38.0,<3.0.0)",
    "google-auth-oauthlib (>=1.2.1,<2.0.0)",
    "google-cloud-pubsub (>=2.29.0,<3.0.0)",
    "google-cloud-storage (>=3.1.0,<4.0.0)",
    "gunicorn (>=23.0.0,<24.0.0)",
    "jsonschema (>=4.23.0,<5.0.0)",
    "launchdarkly-server-sdk (>=9.10.0,<10.0.0)",
    "psycopg2-binary (>=2.9.10,<3.0.0)",
    "python-dateutil (>=2.9.0.post0,<3.0.0)",
    "python-dotenv (>=1.1.0,<2.0.0)",
    "requests (>=2.32.3,<3.0.0)",
    "strict-rfc3339 (>=0.7,<0.8)",
    "werkzeug (>=3.1.3,<4.0.0)",
    "attrs (>=25.3.0,<26.0.0)",
    "dpath (>=2.2.0,<3.0.0)",
    "structured-logging @ git+https://github.com/bcgov/sbc-connect-common.git@main#subdirectory=python/structured-logging",
    "gcp-queue @ git+https://github.com/bcgov/sbc-connect-common.git@main#subdirectory=python/gcp-queue",
    "flask-caching (>=2.3.1,<3.0.0)",
    "cachecontrol (>=0.14.2,<0.15.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
requests-mock = "^1.12.1"
freezegun = "^1.5.1"


[tool.poetry.group.dev.dependencies]
ruff = "^0.11.2"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    "dist",
    "htmlcov",
    ".venv",
    "migrations",
    "devops",
    ".history",
    "tests"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "Q",   # flake8-quotes
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PL",  # pyLint
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["search_api", "flask_jwt_oidc", "structured_logging", "gcp_queue"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.extend-per-file-ignores]
"**/__init__.py" = ["F401"]  # used for imports
"**/business_solr/doc_models/*" = ["N815"]  # camel naming to match doc dataclasses to solr after converting with 'asdict'
"**/exceptions/__init__.py" = ["N818"]  # we use 'exception' suffix instead across bc registries

[tool.pytest.ini_options]
minversion = "2.0"
testpaths = [
   "tests",
]
addopts = "--verbose --strict -p no:warnings --cov=src --cov-report html:htmlcov --cov-report xml:coverage.xml"
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "1"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   "src/search_api",
]
omit = [
    "wsgi.py",
    "gunicorn_config.py"
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]
