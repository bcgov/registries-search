name: REGISTRIES SEARCH API CI

on:
  pull_request:
    types: [assigned, synchronize]
    paths:
      - "search-api/**"

defaults:
  run:
    shell: bash
    working-directory: ./search-api

jobs:
  setup-job:
    runs-on: ubuntu-20.04

    if: github.repository == 'bcgov/registries-search'

    steps:
      - uses: actions/checkout@v2
      - run: "true"

  linting:
    needs: setup-job
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: [3.10.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          make setup
      - name: Lint with pylint
        id: pylint
        run: |
          make pylint
      - name: Lint with flake8
        id: flake8
        run: |
          make flake8

  testing:
    needs: setup-job
    env:
      IMAGE_NAME: registries-search-api
      DATABASE_TEST_USERNAME: postgres
      DATABASE_TEST_PASSWORD: postgres
      DATABASE_TEST_NAME: postgres
      DATABASE_TEST_HOST: localhost
      DATABASE_TEST_PORT: 5432
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      JWT_OIDC_JWKS_CACHE_TIMEOUT: 300
      SOLR_SVC_TEST_URL: ${{ secrets.SOLR_SVC_TEST_URL }}
      RUN_LD_TESTS: False
      RUN_SOLR_TESTS: True
      LD_SDK_KEY: temp
      # needed for spinning up test solr instance
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      ZONE: northamerica-northeast1-a

    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: [3.10.8]

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          create_credentials_file: true
          activate_credentials_file: true
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          access_token_lifetime: "3600s"

      - name: Setup - gcloud / gsutil
        uses: google-github-actions/setup-gcloud@v0

      - name: Login to GCP
        run: |
          gcloud auth login --cred-file=${{steps.auth.outputs.credentials_file_path}}

      - name: Create new solr vm for tests
        run: |
          gcloud compute instances create search-solr-test-vm --source-instance-template search-solr-dev --zone $ZONE --project $PROJECT_ID
          gcloud compute instance-groups unmanaged add-instances search-solr-test-grp-dev --zone=$ZONE --instances=search-solr-test-vm

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          make setup
      - name: Upgrade db
        run: |
          . venv/bin/activate && flask db upgrade
      - name: Test with pytest
        id: test
        run: |
          make test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./search-api/coverage.xml
          flags: search-api
          name: codecov-search-api
          fail_ci_if_error: false
      - name: Cleanup GCP
        run: |
          gcloud compute instances delete search-solr-test-vm --zone $ZONE --project $PROJECT_ID

  build-check:
    needs: setup-job
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - name: build to check strictness
        id: build
        run: |
          make build-nc
